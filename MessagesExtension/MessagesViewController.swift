//
//  MessagesViewController.swift
//  Vote Bubble
//
//  Created by Warren Whipple on 7/11/16.
//  Copyright Â© 2016 Warren Whipple. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController:
    MSMessagesAppViewController,
    BrowseViewControllerDelegate,
    BuildViewControllerDelegate,
    VoteViewControllerDelegate,
    ReportViewControllerDelegate {

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Conversation Handling

    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.

        // Use this method to configure the extension and restore previously stored state.
        if let selectedMessage = conversation.selectedMessage {
            presentChildViewController(ballot: Ballot(message: selectedMessage))
        } else {
            presentChildViewController(ballot: nil)
        }
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.

        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.

        // Use this method to trigger UI updates in response to the message.
    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.

        // Use this to clean up state related to the deleted message.
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
        if childViewControllers.first is BuildViewController && presentationStyle == .compact {
            presentChildViewController(ballot: nil)
        }
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    private func presentChildViewController(ballot: Ballot?) {
        let storyboardID: String

        if let ballot = ballot {
            switch ballot.state {
            case .building:                  storyboardID = "BuildViewController"
            case .votingUnsent, .votingSent: storyboardID = "VoteViewController"
            case .reporting:                 storyboardID = "ReportViewController"
            }
        } else {
            storyboardID = "BrowseViewController"
        }

        guard let childViewController =
            storyboard?.instantiateViewController(withIdentifier: storyboardID) else {
                fatalError("Failed to instantiate storyboard \(storyboardID)")
        }

        if let browseViewController = childViewController as? BrowseViewController {
            browseViewController.delegate = self
        } else {
            guard let ballot = ballot else { fatalError("Ballot not found") }
            if let buildViewController = childViewController as? BuildViewController {
                buildViewController.buildViewControllerDelegate = self
                buildViewController.loadBallot(ballot)
                if presentationStyle == .compact {
                    requestPresentationStyle(.expanded)
                }
            } else if let voteViewController = childViewController as? VoteViewController {
                voteViewController.delegate = self
                voteViewController.loadBallot(ballot)
            } else if let reportViewController = childViewController as? ReportViewController {
                reportViewController.delegate = self
                reportViewController.loadBallot(ballot)
            }
        }

        for oldChildViewController in childViewControllers {
            oldChildViewController.willMove(toParentViewController: nil)
            oldChildViewController.view.removeFromSuperview()
            oldChildViewController.removeFromParentViewController()
        }

        addChildViewController(childViewController)
        guard let childView = childViewController.view else {
            fatalError("Child view controller has no view")
        }
        childView.frame = CGRect(
            x: view.bounds.origin.x,
            y: view.bounds.origin.y + topLayoutGuide.length,
            width: view.bounds.size.width,
            height: view.bounds.size.height - topLayoutGuide.length - bottomLayoutGuide.length
        )
        childView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(childView)
        childView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        childView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        childView.topAnchor.constraint(equalTo: topLayoutGuide.bottomAnchor).isActive = true
        childView.bottomAnchor.constraint(equalTo: bottomLayoutGuide.topAnchor).isActive = true
        childViewController.didMove(toParentViewController: self)
    }

    func insert(_ message: MSMessage) {
        guard let conversation = activeConversation else {
            print("Cannot insert message without active conversation")
            return
        }
        conversation.insert(message) {
            error in
            if let error = error {
                print("Message insertion error: \(error)")
            }
        }
    }

    // MARK: - Child view controller delegate methods

    func didSelectBallot(_ ballot: Ballot) {
        presentChildViewController(ballot: ballot)
    }

    func didAproveBallot(_ ballot: Ballot) {
        presentChildViewController(ballot: ballot)
    }

    func didVote(voter: UUID, ballot: Ballot) {
        insert(ballot.message(sender: voter))
        dismiss()
    }

    func didDeclineToVote(decliner: UUID, ballot: Ballot) {
        presentChildViewController(ballot: ballot)
        dismiss()
    }

    func didCancelVote(ballot: Ballot) {
        presentChildViewController(ballot: ballot)
        dismiss()
    }
    
    func didDismissBallotReport(ballot: Ballot) {
        dismiss()
    }
}
