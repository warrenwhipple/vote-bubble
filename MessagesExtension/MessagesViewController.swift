//
//  MessagesViewController.swift
//  Vote Bubble
//
//  Created by Warren Whipple on 7/11/16.
//  Copyright Â© 2016 Warren Whipple. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController:
    MSMessagesAppViewController,
    BrowseViewControllerDelegate,
    BuildViewControllerDelegate,
    VoteViewControllerDelegate,
    ReportViewControllerDelegate {

    private(set) var ballot: Ballot?
    private(set) var primaryChildViewController: UIViewController?

    enum ViewMode { case browsing, building, voting, reporting }
    var viewMode: ViewMode? {
        guard let childViewController = primaryChildViewController else { return nil        }
        if childViewController is BrowseViewController                  { return .browsing  }
        if childViewController is BuildViewController                   { return .building  }
        if childViewController is VoteViewController                    { return .voting    }
        if childViewController is ReportViewController                  { return .reporting }
        return nil
    }

    var localParticipantIdentifier: UUID {
        guard let activeConversation = activeConversation else {
            fatalError("Local participant identifier requires active conversation")
        }
        return activeConversation.localParticipantIdentifier
    }

    var remoteParticipantIdentifiers: [UUID] {
        guard let activeConversation = activeConversation else {
            fatalError("Remote participant identifiers array requires active conversation")
        }
        return activeConversation.remoteParticipantIdentifiers
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        print("MSMessagesAppViewController.viewDidAppear()")
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        print("MSMessagesAppViewController.didReceiveMemoryWarning()")
    }

    func startView(for ballot: Ballot) {
        switch ballot.state {
        case .building:
            transition(to: .building)
        case .open:
            if ballot.didVote(localParticipantIdentifier) {
                transition(to: .reporting)
            } else {
                transition(to: .voting)
            }
        case .closed:
            transition(to: .reporting)
        }
    }

    func startBrowseView() {
        transition(to: .browsing)
    }

    // MARK: - MSMessagesAppViewController methods

    override func willBecomeActive(with conversation: MSConversation) {
        print("MSMessagesAppViewController.willBecomeActive()")
        if let message = conversation.selectedMessage,
            let ballot = Ballot(message: message) {
            startView(for: ballot)
        } else {
            startBrowseView()
        }
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("MSMessagesAppViewController.didResignActive()")
    }

    override func willSelect(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.willSelect()")
    }

    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didSelect()")
        if let ballot = Ballot(message: message) {
            startView(for: ballot)
        } else {
            startBrowseView()
        }
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didReceive()")
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        // Use this method to trigger UI updates in response to the message.
    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didStartSending()")
        // Called when the user taps the send button.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didCancelSending()")
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print("MSMessagesAppViewController.willTransition()")
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
        if presentationStyle == .compact && viewMode != .browsing {
            transition(to: .browsing)
        }
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print("MSMessagesAppViewController.didTransition()")
        // Called after the extension transitions to a new presentation style.
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    // MARK: - View mode transitions

    private func transition(to newViewMode: ViewMode) {
        let storyboardID: String
        switch newViewMode {
        case .browsing:  storyboardID = "BrowseViewController"
        case .building:  storyboardID = "BuildViewController"
        case .voting:    storyboardID = "VoteViewController"
        case .reporting: storyboardID = "ReportViewController"
        }
        guard let newChildViewController =
            storyboard?.instantiateViewController(withIdentifier: storyboardID) else {
                fatalError("Failed to instantiate storyboard \(storyboardID)")
        }

        switch newViewMode {
        case .browsing:
            let browseViewController = newChildViewController as! BrowseViewController
            browseViewController.delegate = self
            browseViewController.ballots = [Ballot.simpleYesNo(), Ballot.simpleYesNo()]
        case .building:
            let buildViewController = newChildViewController as! BuildViewController
            buildViewController.delegate = self
            if presentationStyle == .compact { requestPresentationStyle(.expanded) }
        case .voting:
            let voteViewController = newChildViewController as! VoteViewController
            voteViewController.delegate = self
            if presentationStyle == .compact { requestPresentationStyle(.expanded) }
        case .reporting:
            let reportViewController = newChildViewController as! ReportViewController
            reportViewController.delegate = self
            if presentationStyle == .compact { requestPresentationStyle(.expanded) }
        }

        if let oldChildViewController = primaryChildViewController {
            oldChildViewController.willMove(toParentViewController: nil)
            oldChildViewController.removeFromParentViewController()
            oldChildViewController.view.removeFromSuperview()
        }

        primaryChildViewController = newChildViewController

        guard let childView = newChildViewController.view else {
            print("Child view controller has no view")
            return
        }
        childView.frame = view.bounds
        childView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(childView)
        childView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        childView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        childView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        childView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        addChildViewController(newChildViewController)
        newChildViewController.didMove(toParentViewController: self)
    }

    func insert(_ message: MSMessage) {
        guard let conversation = activeConversation else {
            print("Cannot insert message without active conversation")
            return
        }
        conversation.insert(message) {
            error in
            if let error = error {
                print("Message insertion error: \(error)")
            }
        }
    }

    // MARK: - Child view controller delegate methods

    func browseSelect(ballot: Ballot) {
        self.ballot = ballot
        transition(to: .building)
    }

    func aproveBallot() {
        transition(to: .voting)
    }

    func vote(for candidate: Candidate) {
        guard let ballot = ballot else {
            fatalError("Cannot vote without ballot")
        }
        insert(ballot.message(sender: localParticipantIdentifier))
        transition(to: .browsing)
        requestPresentationStyle(.compact)
    }

    func declineToVote() {
        guard let ballot = ballot else {
            fatalError("Cannot decline to vote without ballot")
        }
        insert(ballot.message(sender: localParticipantIdentifier))
        transition(to: .browsing)
        requestPresentationStyle(.compact)
    }

    func cancelVote() {
        transition(to: .building)
    }

    func dismissReport() {
        transition(to: .browsing)
        requestPresentationStyle(.compact)
    }
}
