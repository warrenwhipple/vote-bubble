//
//  MessagesViewController.swift
//  Vote Bubble
//
//  Created by Warren Whipple on 7/11/16.
//  Copyright Â© 2016 Warren Whipple. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController:
    MSMessagesAppViewController,
    BrowseViewControllerDelegate,
    BuildViewControllerDelegate,
    VoteViewControllerDelegate,
    ReportViewControllerDelegate {

    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var bottomConstraint: NSLayoutConstraint!

    var ballot: Ballot?
    private(set) var primaryChildViewController: UIViewController?

    enum State {
        case
        browsing,
        building,
        voting,
        reporting
    }

    var state: State {
        guard let ballot = ballot else { return .browsing }
        switch ballot.state {
        case .building:                  return .building
        case .votingUnsent, .votingSent: return .voting
        case .reporting:                 return .reporting
        }
    }

    var keyboardHeight: CGFloat?
    var keyboardAnimationDuration: TimeInterval?
    var keyboardAnimationCurve: UIViewAnimationCurve?

    // MARK: - MSMessagesAppViewController methods

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        print("MSMessagesAppViewController.viewDidAppear()")
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        print("MSMessagesAppViewController.didReceiveMemoryWarning()")
    }

    override func willBecomeActive(with conversation: MSConversation) {
        print("MSMessagesAppViewController.willBecomeActive()")
        if let message = conversation.selectedMessage {
            ballot = Ballot(message: message)
        } else {
            ballot = nil
        }
        transistionState(animate: false)
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("MSMessagesAppViewController.didResignActive()")
    }

    override func willSelect(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.willSelect()")
        ballot = Ballot(message: message)
        transistionState(animate: false)
    }

    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didSelect()")

    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didReceive()")
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        // Use this method to trigger UI updates in response to the message.
    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didStartSending()")
        // Called when the user taps the send button.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        print("MSMessagesAppViewController.didCancelSending()")
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print("MSMessagesAppViewController.willTransition()")
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
        if presentationStyle == .compact && state != .browsing {
            ballot = nil
            transistionState()
        }
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print("MSMessagesAppViewController.didTransition()")
        // Called after the extension transitions to a new presentation style.
        // Use this method to finalize any behaviors associated with the change in presentation style.
        /*
        if presentationStyle == .compact && bottomConstraint.constant != 0 {
            adjustForKeyboardHide()
        }
        view.setNeedsLayout()
        */
    }

    // MARK: - State changes

    func transistionState(animate: Bool = true) {
        let storyboardID: String
        switch state {
        case .browsing:  storyboardID = "BrowseViewController"
        case .building:  storyboardID = "BuildViewController"
        case .voting:    storyboardID = "VoteViewController"
        case .reporting: storyboardID = "ReportViewController"
        }
        guard let childViewController =
            storyboard?.instantiateViewController(withIdentifier: storyboardID) else {
                fatalError("Failed to instantiate storyboard \(storyboardID)")
        }

        switch state {
        case .browsing:
            let browseViewController = childViewController as! BrowseViewController
            browseViewController.delegate = self
        case .building:
            let buildViewController = childViewController as! BuildViewController
            buildViewController.delegate = self
            if presentationStyle == .compact { requestPresentationStyle(.expanded) }
        case .voting:
            let voteViewController = childViewController as! VoteViewController
            voteViewController.delegate = self
        case .reporting:
            let reportViewController = childViewController as! ReportViewController
            reportViewController.delegate = self
        }

        if let oldChildViewController = primaryChildViewController {
            oldChildViewController.willMove(toParentViewController: nil)
            oldChildViewController.view.removeFromSuperview()
            oldChildViewController.removeFromParentViewController()
        }

        primaryChildViewController = childViewController

        addChildViewController(childViewController)
        guard let childView = childViewController.view else {
            fatalError("Child view controller has no view")
        }
        childView.frame = containerView.bounds
        childView.translatesAutoresizingMaskIntoConstraints = false
        containerView.addSubview(childView)
        childView.leftAnchor.constraint(equalTo: containerView.leftAnchor).isActive = true
        childView.rightAnchor.constraint(equalTo: containerView.rightAnchor).isActive = true
        childView.topAnchor.constraint(equalTo: containerView.topAnchor).isActive = true
        childView.bottomAnchor.constraint(equalTo: containerView.bottomAnchor).isActive = true
        childViewController.didMove(toParentViewController: self)
    }

    func insert(_ message: MSMessage) {
        guard let conversation = activeConversation else {
            print("Cannot insert message without active conversation")
            return
        }
        conversation.insert(message) {
            error in
            if let error = error {
                print("Message insertion error: \(error)")
            }
        }
    }

    // MARK: - Child view controller delegate methods

    func browseSelectBallot(_ ballot: Ballot) {
        self.ballot = ballot
        transistionState()
    }

    func aproveBallot() {
        ballot?.state = .votingUnsent
        transistionState()
    }

    func vote(candidate: Candidate) {
        guard let sender = activeConversation?.localParticipantIdentifier else { return }
        guard let message = ballot?.message(sender: sender) else { return }
        insert(message)
        ballot = nil
        transistionState()
        requestPresentationStyle(.compact)
    }

    func declineToVote() {
        guard let sender = activeConversation?.localParticipantIdentifier else { return }
        guard let message = ballot?.message(sender: sender) else { return }
        insert(message)
        ballot = nil
        transistionState()
        requestPresentationStyle(.compact)
    }

    func cancelVote() {
        ballot?.state = .building
        transistionState()
    }
    
    func dismissBallotReport() {
        ballot = nil
        transistionState()
        requestPresentationStyle(.compact)
    }
}
